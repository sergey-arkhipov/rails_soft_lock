module RailsSoftLock
  # Service for managing object locks
  # A lock object contains the following parameters:
  #   - object_name: The name of the lock storage, typically the model name with an optional scope
  #   - object_key: The identifier of the lock instance, typically a unique database record ID
  #   - object_value: The identifier of the locker that locked the record
  class LockObject
    @object_name: untyped

    @object_key: untyped

    @object_value: untyped

    # Подключаем адаптер на основе конфигурации
    def self.adapter: () -> untyped

    attr_reader object_name: untyped

    attr_reader object_key: untyped

    attr_reader object_value: untyped

    def initialize: (object_name: untyped, ?object_key: untyped?, ?object_value: untyped?) -> void

    # Returns the ID of the locker who locked the object
    # @return [String, nil] The locker's ID or nil if not locked
    def locked_by: () -> untyped

    # Attempts to lock the object or returns the existing lock
    # @return [Hash] { has_locked: Boolean, locked_by: String or nil }
    def lock_or_find: () -> { has_locked: untyped, locked_by: untyped }

    # Unlocks the object
    # @return [Boolean] True if the lock was removed, false otherwise
    def unlock: () -> untyped

    # Returns all locks in the storage
    # @return [Hash] All key-value pairs in the storage
    def all_locks: () -> untyped
  end
end
